// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "state":
			out.State = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "web_url":
			out.WebURL = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "bio":
			if in.IsNull() {
				in.Skip()
				out.Bio = nil
			} else {
				if out.Bio == nil {
					out.Bio = new(string)
				}
				*out.Bio = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "public_email":
			out.PublicEmail = string(in.String())
		case "skype":
			out.Skype = string(in.String())
		case "linkedin":
			out.Linkedin = string(in.String())
		case "twitter":
			out.Twitter = string(in.String())
		case "website_url":
			out.WebsiteURL = string(in.String())
		case "organization":
			out.Organization = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		if in.Bio == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Bio))
		}
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		if in.Location == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Location))
		}
	}
	{
		const prefix string = ",\"public_email\":"
		out.RawString(prefix)
		out.String(string(in.PublicEmail))
	}
	{
		const prefix string = ",\"skype\":"
		out.RawString(prefix)
		out.String(string(in.Skype))
	}
	{
		const prefix string = ",\"linkedin\":"
		out.RawString(prefix)
		out.String(string(in.Linkedin))
	}
	{
		const prefix string = ",\"twitter\":"
		out.RawString(prefix)
		out.String(string(in.Twitter))
	}
	{
		const prefix string = ",\"website_url\":"
		out.RawString(prefix)
		out.String(string(in.WebsiteURL))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.Organization))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels1(in *jlexer.Lexer, out *Pipeline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "status":
			out.Status = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "sha":
			out.SHA = string(in.String())
		case "before_sha":
			out.BeforeSHA = string(in.String())
		case "tag":
			out.Tag = bool(in.Bool())
		case "yaml_errors":
			if in.IsNull() {
				in.Skip()
				out.YamlErrors = nil
			} else {
				if out.YamlErrors == nil {
					out.YamlErrors = new(string)
				}
				*out.YamlErrors = string(in.String())
			}
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		case "started_at":
			if in.IsNull() {
				in.Skip()
				out.StartedAt = nil
			} else {
				if out.StartedAt == nil {
					out.StartedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StartedAt).UnmarshalJSON(data))
				}
			}
		case "finished_at":
			if in.IsNull() {
				in.Skip()
				out.FinishedAt = nil
			} else {
				if out.FinishedAt == nil {
					out.FinishedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FinishedAt).UnmarshalJSON(data))
				}
			}
		case "commited_at":
			if in.IsNull() {
				in.Skip()
				out.CommitedAt = nil
			} else {
				if out.CommitedAt == nil {
					out.CommitedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CommitedAt).UnmarshalJSON(data))
				}
			}
		case "duration":
			if in.IsNull() {
				in.Skip()
				out.Duration = nil
			} else {
				if out.Duration == nil {
					out.Duration = new(time.Duration)
				}
				*out.Duration = time.Duration(in.Int64())
			}
		case "coverage":
			if in.IsNull() {
				in.Skip()
				out.Coverage = nil
			} else {
				if out.Coverage == nil {
					out.Coverage = new(string)
				}
				*out.Coverage = string(in.String())
			}
		case "web_url":
			out.WebURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels1(out *jwriter.Writer, in Pipeline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"ref\":"
		out.RawString(prefix)
		out.String(string(in.Ref))
	}
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix)
		out.String(string(in.SHA))
	}
	{
		const prefix string = ",\"before_sha\":"
		out.RawString(prefix)
		out.String(string(in.BeforeSHA))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tag))
	}
	{
		const prefix string = ",\"yaml_errors\":"
		out.RawString(prefix)
		if in.YamlErrors == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.YamlErrors))
		}
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		if in.CreatedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreatedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		if in.UpdatedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdatedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		if in.StartedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.StartedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"finished_at\":"
		out.RawString(prefix)
		if in.FinishedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FinishedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"commited_at\":"
		out.RawString(prefix)
		if in.CommitedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CommitedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		if in.Duration == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Duration))
		}
	}
	{
		const prefix string = ",\"coverage\":"
		out.RawString(prefix)
		if in.Coverage == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Coverage))
		}
	}
	{
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pipeline) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pipeline) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pipeline) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pipeline) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels2(in *jlexer.Lexer, out *Commit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "author_name":
			out.AuthorName = string(in.String())
		case "author_email":
			out.AuthorEmail = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "short_id":
			out.ShortID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels2(out *jwriter.Writer, in Commit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"author_name\":"
		out.RawString(prefix)
		out.String(string(in.AuthorName))
	}
	{
		const prefix string = ",\"author_email\":"
		out.RawString(prefix)
		out.String(string(in.AuthorEmail))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"short_id\":"
		out.RawString(prefix)
		out.String(string(in.ShortID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Commit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Commit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Commit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Commit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels3(in *jlexer.Lexer, out *Artifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_type":
			out.FileType = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "filename":
			out.Filename = string(in.String())
		case "file_format":
			out.FileFormat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels3(out *jwriter.Writer, in Artifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileType))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"file_format\":"
		out.RawString(prefix)
		out.String(string(in.FileFormat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Artifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Artifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Artifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Artifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTovarischSuhovPipelineManagerInternalPkgGitlabModels3(l, v)
}
